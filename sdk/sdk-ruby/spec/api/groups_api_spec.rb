=begin
#directus.io

#API for directus.io

OpenAPI spec version: 1.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for DirectusSDK::GroupsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'GroupsApi' do
  before do
    # run before each test
    @instance = DirectusSDK::GroupsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of GroupsApi' do
    it 'should create an instance of GroupsApi' do
      expect(@instance).to be_instance_of(DirectusSDK::GroupsApi)
    end
  end

  # unit tests for add_group
  # Add a new group
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :name Name of group to add
  # @return [nil]
  describe 'add_group test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for add_privilege
  # Create new table privileges for the specified user group
  # 
  # @param group_id ID of group to return
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :id Privilege&#39;s Unique Identification number
  # @option opts [String] :table_name Name of table to add
  # @option opts [Integer] :allow_add Permission to add/create entries in the table (See values below)
  # @option opts [Integer] :allow_edit Permission to edit/update entries in the table (See values below)
  # @option opts [Integer] :allow_delete Permission to delete/remove entries in the table (See values below)
  # @option opts [Integer] :allow_view Permission to view/read entries in the table (See values below)
  # @option opts [Integer] :allow_alter Permission to add/create entries in the table (See values below)
  # @option opts [BOOLEAN] :nav_listed If the table should be visible in the sidebar for this user group
  # @option opts [String] :read_field_blacklist A CSV of column names that the group can&#39;t view (read)
  # @option opts [String] :write_field_blacklist A CSV of column names that the group can&#39;t edit (update)
  # @option opts [String] :status_id State of the record that this permissions belongs to (Draft, Active or Soft Deleted)
  # @return [nil]
  describe 'add_privilege test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_group
  # Returns specific group
  # 
  # @param group_id ID of group to return
  # @param [Hash] opts the optional parameters
  # @return [GetGroup]
  describe 'get_group test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_groups
  # Returns groups
  # 
  # @param [Hash] opts the optional parameters
  # @return [GetGroups]
  describe 'get_groups test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_privileges
  # Returns group privileges
  # 
  # @param group_id ID of group to return
  # @param [Hash] opts the optional parameters
  # @return [GetPrivileges]
  describe 'get_privileges test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_privileges_for_table
  # Returns group privileges by tableName
  # 
  # @param group_id ID of group to return
  # @param table_name_or_privilege_id ID of privileges or Table Name to use
  # @param [Hash] opts the optional parameters
  # @return [GetPrivilegesForTable]
  describe 'get_privileges_for_table test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_privileges
  # Update privileges by privilegeId
  # 
  # @param group_id ID of group to return
  # @param table_name_or_privilege_id ID of privileges or Table Name to use
  # @param [Hash] opts the optional parameters
  # @option opts [String] :privileges_id ubique privilege ID
  # @option opts [String] :group_id2 ID of group to return
  # @option opts [String] :table_name Name of table to add
  # @option opts [Integer] :allow_add Permission to add/create entries in the table (See values below)
  # @option opts [Integer] :allow_edit Permission to edit/update entries in the table (See values below)
  # @option opts [Integer] :allow_delete Permission to delete/remove entries in the table (See values below)
  # @option opts [Integer] :allow_view Permission to view/read entries in the table (See values below)
  # @option opts [Integer] :allow_alter Permission to add/create entries in the table (See values below)
  # @option opts [BOOLEAN] :nav_listed If the table should be visible in the sidebar for this user group
  # @option opts [String] :read_field_blacklist A CSV of column names that the group can&#39;t view (read)
  # @option opts [String] :write_field_blacklist A CSV of column names that the group can&#39;t edit (update)
  # @option opts [String] :status_id State of the record that this permissions belongs to (Draft, Active or Soft Deleted)
  # @return [nil]
  describe 'update_privileges test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
