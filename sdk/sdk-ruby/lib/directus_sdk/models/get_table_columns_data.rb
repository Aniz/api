=begin
#directus.io

#API for directus.io

OpenAPI spec version: 1.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.0-SNAPSHOT

=end

require 'date'

module DirectusSDK

  class GetTableColumnsData
    attr_accessor :name

    attr_accessor :id

    attr_accessor :column_name

    attr_accessor :type

    attr_accessor :length

    attr_accessor :precision

    attr_accessor :scale

    attr_accessor :sort

    attr_accessor :default_value

    attr_accessor :nullable

    attr_accessor :key

    attr_accessor :extra_options

    attr_accessor :options

    attr_accessor :table_name

    attr_accessor :required

    attr_accessor :ui

    attr_accessor :hidden_list

    attr_accessor :hidden_input

    attr_accessor :relationship

    attr_accessor :comment


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'id' => :'id',
        :'column_name' => :'column_name',
        :'type' => :'type',
        :'length' => :'length',
        :'precision' => :'precision',
        :'scale' => :'scale',
        :'sort' => :'sort',
        :'default_value' => :'default_value',
        :'nullable' => :'nullable',
        :'key' => :'key',
        :'extra_options' => :'extra_options',
        :'options' => :'options',
        :'table_name' => :'table_name',
        :'required' => :'required',
        :'ui' => :'ui',
        :'hidden_list' => :'hidden_list',
        :'hidden_input' => :'hidden_input',
        :'relationship' => :'relationship',
        :'comment' => :'comment'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'name' => :'String',
        :'id' => :'String',
        :'column_name' => :'String',
        :'type' => :'String',
        :'length' => :'String',
        :'precision' => :'Integer',
        :'scale' => :'Integer',
        :'sort' => :'Integer',
        :'default_value' => :'String',
        :'nullable' => :'BOOLEAN',
        :'key' => :'String',
        :'extra_options' => :'Array<Object>',
        :'options' => :'Array<Object>',
        :'table_name' => :'String',
        :'required' => :'BOOLEAN',
        :'ui' => :'String',
        :'hidden_list' => :'BOOLEAN',
        :'hidden_input' => :'BOOLEAN',
        :'relationship' => :'String',
        :'comment' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'column_name')
        self.column_name = attributes[:'column_name']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'length')
        self.length = attributes[:'length']
      end

      if attributes.has_key?(:'precision')
        self.precision = attributes[:'precision']
      end

      if attributes.has_key?(:'scale')
        self.scale = attributes[:'scale']
      end

      if attributes.has_key?(:'sort')
        self.sort = attributes[:'sort']
      end

      if attributes.has_key?(:'default_value')
        self.default_value = attributes[:'default_value']
      end

      if attributes.has_key?(:'nullable')
        self.nullable = attributes[:'nullable']
      end

      if attributes.has_key?(:'key')
        self.key = attributes[:'key']
      end

      if attributes.has_key?(:'extra_options')
        if (value = attributes[:'extra_options']).is_a?(Array)
          self.extra_options = value
        end
      end

      if attributes.has_key?(:'options')
        if (value = attributes[:'options']).is_a?(Array)
          self.options = value
        end
      end

      if attributes.has_key?(:'table_name')
        self.table_name = attributes[:'table_name']
      end

      if attributes.has_key?(:'required')
        self.required = attributes[:'required']
      end

      if attributes.has_key?(:'ui')
        self.ui = attributes[:'ui']
      end

      if attributes.has_key?(:'hidden_list')
        self.hidden_list = attributes[:'hidden_list']
      end

      if attributes.has_key?(:'hidden_input')
        self.hidden_input = attributes[:'hidden_input']
      end

      if attributes.has_key?(:'relationship')
        self.relationship = attributes[:'relationship']
      end

      if attributes.has_key?(:'comment')
        self.comment = attributes[:'comment']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          id == o.id &&
          column_name == o.column_name &&
          type == o.type &&
          length == o.length &&
          precision == o.precision &&
          scale == o.scale &&
          sort == o.sort &&
          default_value == o.default_value &&
          nullable == o.nullable &&
          key == o.key &&
          extra_options == o.extra_options &&
          options == o.options &&
          table_name == o.table_name &&
          required == o.required &&
          ui == o.ui &&
          hidden_list == o.hidden_list &&
          hidden_input == o.hidden_input &&
          relationship == o.relationship &&
          comment == o.comment
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [name, id, column_name, type, length, precision, scale, sort, default_value, nullable, key, extra_options, options, table_name, required, ui, hidden_list, hidden_input, relationship, comment].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DirectusSDK.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
