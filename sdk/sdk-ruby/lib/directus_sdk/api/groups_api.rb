=begin
#directus.io

#API for directus.io

OpenAPI spec version: 1.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.0-SNAPSHOT

=end

require "uri"

module DirectusSDK
  class GroupsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Add a new group
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Name of group to add
    # @return [nil]
    def add_group(opts = {})
      add_group_with_http_info(opts)
      return nil
    end

    # Add a new group
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Name of group to add
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_group_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupsApi.add_group ..."
      end
      # resource path
      local_var_path = "/groups"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["name"] = opts[:'name'] if !opts[:'name'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#add_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create new table privileges for the specified user group
    # 
    # @param group_id ID of group to return
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id Privilege&#39;s Unique Identification number
    # @option opts [String] :table_name Name of table to add
    # @option opts [Integer] :allow_add Permission to add/create entries in the table (See values below)
    # @option opts [Integer] :allow_edit Permission to edit/update entries in the table (See values below)
    # @option opts [Integer] :allow_delete Permission to delete/remove entries in the table (See values below)
    # @option opts [Integer] :allow_view Permission to view/read entries in the table (See values below)
    # @option opts [Integer] :allow_alter Permission to add/create entries in the table (See values below)
    # @option opts [BOOLEAN] :nav_listed If the table should be visible in the sidebar for this user group
    # @option opts [String] :read_field_blacklist A CSV of column names that the group can&#39;t view (read)
    # @option opts [String] :write_field_blacklist A CSV of column names that the group can&#39;t edit (update)
    # @option opts [String] :status_id State of the record that this permissions belongs to (Draft, Active or Soft Deleted)
    # @return [nil]
    def add_privilege(group_id, opts = {})
      add_privilege_with_http_info(group_id, opts)
      return nil
    end

    # Create new table privileges for the specified user group
    # 
    # @param group_id ID of group to return
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id Privilege&#39;s Unique Identification number
    # @option opts [String] :table_name Name of table to add
    # @option opts [Integer] :allow_add Permission to add/create entries in the table (See values below)
    # @option opts [Integer] :allow_edit Permission to edit/update entries in the table (See values below)
    # @option opts [Integer] :allow_delete Permission to delete/remove entries in the table (See values below)
    # @option opts [Integer] :allow_view Permission to view/read entries in the table (See values below)
    # @option opts [Integer] :allow_alter Permission to add/create entries in the table (See values below)
    # @option opts [BOOLEAN] :nav_listed If the table should be visible in the sidebar for this user group
    # @option opts [String] :read_field_blacklist A CSV of column names that the group can&#39;t view (read)
    # @option opts [String] :write_field_blacklist A CSV of column names that the group can&#39;t edit (update)
    # @option opts [String] :status_id State of the record that this permissions belongs to (Draft, Active or Soft Deleted)
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_privilege_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupsApi.add_privilege ..."
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling GroupsApi.add_privilege"
      end
      # resource path
      local_var_path = "/privileges/{groupId}".sub('{' + 'groupId' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["id"] = opts[:'id'] if !opts[:'id'].nil?
      form_params["table_name"] = opts[:'table_name'] if !opts[:'table_name'].nil?
      form_params["allow_add"] = opts[:'allow_add'] if !opts[:'allow_add'].nil?
      form_params["allow_edit"] = opts[:'allow_edit'] if !opts[:'allow_edit'].nil?
      form_params["allow_delete"] = opts[:'allow_delete'] if !opts[:'allow_delete'].nil?
      form_params["allow_view"] = opts[:'allow_view'] if !opts[:'allow_view'].nil?
      form_params["allow_alter"] = opts[:'allow_alter'] if !opts[:'allow_alter'].nil?
      form_params["nav_listed"] = opts[:'nav_listed'] if !opts[:'nav_listed'].nil?
      form_params["read_field_blacklist"] = opts[:'read_field_blacklist'] if !opts[:'read_field_blacklist'].nil?
      form_params["write_field_blacklist"] = opts[:'write_field_blacklist'] if !opts[:'write_field_blacklist'].nil?
      form_params["status_id"] = opts[:'status_id'] if !opts[:'status_id'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#add_privilege\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns specific group
    # 
    # @param group_id ID of group to return
    # @param [Hash] opts the optional parameters
    # @return [GetGroup]
    def get_group(group_id, opts = {})
      data, _status_code, _headers = get_group_with_http_info(group_id, opts)
      return data
    end

    # Returns specific group
    # 
    # @param group_id ID of group to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetGroup, Fixnum, Hash)>] GetGroup data, response status code and response headers
    def get_group_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupsApi.get_group ..."
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling GroupsApi.get_group"
      end
      # resource path
      local_var_path = "/groups/{groupId}".sub('{' + 'groupId' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#get_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns groups
    # 
    # @param [Hash] opts the optional parameters
    # @return [GetGroups]
    def get_groups(opts = {})
      data, _status_code, _headers = get_groups_with_http_info(opts)
      return data
    end

    # Returns groups
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetGroups, Fixnum, Hash)>] GetGroups data, response status code and response headers
    def get_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupsApi.get_groups ..."
      end
      # resource path
      local_var_path = "/groups"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetGroups')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#get_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns group privileges
    # 
    # @param group_id ID of group to return
    # @param [Hash] opts the optional parameters
    # @return [GetPrivileges]
    def get_privileges(group_id, opts = {})
      data, _status_code, _headers = get_privileges_with_http_info(group_id, opts)
      return data
    end

    # Returns group privileges
    # 
    # @param group_id ID of group to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetPrivileges, Fixnum, Hash)>] GetPrivileges data, response status code and response headers
    def get_privileges_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupsApi.get_privileges ..."
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling GroupsApi.get_privileges"
      end
      # resource path
      local_var_path = "/privileges/{groupId}".sub('{' + 'groupId' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetPrivileges')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#get_privileges\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns group privileges by tableName
    # 
    # @param group_id ID of group to return
    # @param table_name_or_privilege_id ID of privileges or Table Name to use
    # @param [Hash] opts the optional parameters
    # @return [GetPrivilegesForTable]
    def get_privileges_for_table(group_id, table_name_or_privilege_id, opts = {})
      data, _status_code, _headers = get_privileges_for_table_with_http_info(group_id, table_name_or_privilege_id, opts)
      return data
    end

    # Returns group privileges by tableName
    # 
    # @param group_id ID of group to return
    # @param table_name_or_privilege_id ID of privileges or Table Name to use
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetPrivilegesForTable, Fixnum, Hash)>] GetPrivilegesForTable data, response status code and response headers
    def get_privileges_for_table_with_http_info(group_id, table_name_or_privilege_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupsApi.get_privileges_for_table ..."
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling GroupsApi.get_privileges_for_table"
      end
      # verify the required parameter 'table_name_or_privilege_id' is set
      if @api_client.config.client_side_validation && table_name_or_privilege_id.nil?
        fail ArgumentError, "Missing the required parameter 'table_name_or_privilege_id' when calling GroupsApi.get_privileges_for_table"
      end
      # resource path
      local_var_path = "/privileges/{groupId}/{tableNameOrPrivilegeId}".sub('{' + 'groupId' + '}', group_id.to_s).sub('{' + 'tableNameOrPrivilegeId' + '}', table_name_or_privilege_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetPrivilegesForTable')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#get_privileges_for_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update privileges by privilegeId
    # 
    # @param group_id ID of group to return
    # @param table_name_or_privilege_id ID of privileges or Table Name to use
    # @param [Hash] opts the optional parameters
    # @option opts [String] :privileges_id ubique privilege ID
    # @option opts [String] :group_id2 ID of group to return
    # @option opts [String] :table_name Name of table to add
    # @option opts [Integer] :allow_add Permission to add/create entries in the table (See values below)
    # @option opts [Integer] :allow_edit Permission to edit/update entries in the table (See values below)
    # @option opts [Integer] :allow_delete Permission to delete/remove entries in the table (See values below)
    # @option opts [Integer] :allow_view Permission to view/read entries in the table (See values below)
    # @option opts [Integer] :allow_alter Permission to add/create entries in the table (See values below)
    # @option opts [BOOLEAN] :nav_listed If the table should be visible in the sidebar for this user group
    # @option opts [String] :read_field_blacklist A CSV of column names that the group can&#39;t view (read)
    # @option opts [String] :write_field_blacklist A CSV of column names that the group can&#39;t edit (update)
    # @option opts [String] :status_id State of the record that this permissions belongs to (Draft, Active or Soft Deleted)
    # @return [nil]
    def update_privileges(group_id, table_name_or_privilege_id, opts = {})
      update_privileges_with_http_info(group_id, table_name_or_privilege_id, opts)
      return nil
    end

    # Update privileges by privilegeId
    # 
    # @param group_id ID of group to return
    # @param table_name_or_privilege_id ID of privileges or Table Name to use
    # @param [Hash] opts the optional parameters
    # @option opts [String] :privileges_id ubique privilege ID
    # @option opts [String] :group_id2 ID of group to return
    # @option opts [String] :table_name Name of table to add
    # @option opts [Integer] :allow_add Permission to add/create entries in the table (See values below)
    # @option opts [Integer] :allow_edit Permission to edit/update entries in the table (See values below)
    # @option opts [Integer] :allow_delete Permission to delete/remove entries in the table (See values below)
    # @option opts [Integer] :allow_view Permission to view/read entries in the table (See values below)
    # @option opts [Integer] :allow_alter Permission to add/create entries in the table (See values below)
    # @option opts [BOOLEAN] :nav_listed If the table should be visible in the sidebar for this user group
    # @option opts [String] :read_field_blacklist A CSV of column names that the group can&#39;t view (read)
    # @option opts [String] :write_field_blacklist A CSV of column names that the group can&#39;t edit (update)
    # @option opts [String] :status_id State of the record that this permissions belongs to (Draft, Active or Soft Deleted)
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_privileges_with_http_info(group_id, table_name_or_privilege_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GroupsApi.update_privileges ..."
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling GroupsApi.update_privileges"
      end
      # verify the required parameter 'table_name_or_privilege_id' is set
      if @api_client.config.client_side_validation && table_name_or_privilege_id.nil?
        fail ArgumentError, "Missing the required parameter 'table_name_or_privilege_id' when calling GroupsApi.update_privileges"
      end
      # resource path
      local_var_path = "/privileges/{groupId}/{tableNameOrPrivilegeId}".sub('{' + 'groupId' + '}', group_id.to_s).sub('{' + 'tableNameOrPrivilegeId' + '}', table_name_or_privilege_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["privileges_id"] = opts[:'privileges_id'] if !opts[:'privileges_id'].nil?
      form_params["group_id"] = opts[:'group_id2'] if !opts[:'group_id2'].nil?
      form_params["table_name"] = opts[:'table_name'] if !opts[:'table_name'].nil?
      form_params["allow_add"] = opts[:'allow_add'] if !opts[:'allow_add'].nil?
      form_params["allow_edit"] = opts[:'allow_edit'] if !opts[:'allow_edit'].nil?
      form_params["allow_delete"] = opts[:'allow_delete'] if !opts[:'allow_delete'].nil?
      form_params["allow_view"] = opts[:'allow_view'] if !opts[:'allow_view'].nil?
      form_params["allow_alter"] = opts[:'allow_alter'] if !opts[:'allow_alter'].nil?
      form_params["nav_listed"] = opts[:'nav_listed'] if !opts[:'nav_listed'].nil?
      form_params["read_field_blacklist"] = opts[:'read_field_blacklist'] if !opts[:'read_field_blacklist'].nil?
      form_params["write_field_blacklist"] = opts[:'write_field_blacklist'] if !opts[:'write_field_blacklist'].nil?
      form_params["status_id"] = opts[:'status_id'] if !opts[:'status_id'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#update_privileges\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
