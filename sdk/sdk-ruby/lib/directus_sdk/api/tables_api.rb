=begin
#directus.io

#API for directus.io

OpenAPI spec version: 1.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.0-SNAPSHOT

=end

require "uri"

module DirectusSDK
  class TablesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create a column in a given table
    # 
    # @param table_id ID of table to return rows from
    # @param [Hash] opts the optional parameters
    # @option opts [String] :table_name Name of table to add
    # @option opts [String] :column_name The unique name of the column to create
    # @option opts [String] :type The datatype of the column, eg: INT
    # @option opts [String] :ui The Directus Interface to use for this column
    # @option opts [BOOLEAN] :hidden_input Whether the column will be hidden (globally) on the Edit Item page
    # @option opts [BOOLEAN] :hidden_list Whether the column will be hidden (globally) on the Item Listing page
    # @option opts [BOOLEAN] :required Whether the column is required. If required, the interface&#39;s validation function will be triggered
    # @option opts [Integer] :sort The sort order of the column used to override the column order in the schema
    # @option opts [String] :comment A helpful note to users for this column
    # @option opts [String] :relationship_type The column&#39;s relationship type (only used when storing relational data) eg: ONETOMANY, MANYTOMANY or MANYTOONE
    # @option opts [String] :related_table The table name this column is related to (only used when storing relational data)
    # @option opts [String] :junction_table The pivot/junction table that joins the column&#39;s table with the related table (only used when storing relational data)
    # @option opts [String] :junction_key_left The column name in junction that is related to the column&#39;s table (only used when storing relational data)
    # @option opts [String] :junction_key_right The column name in junction that is related to the related table (only used when storing relational data)
    # @return [nil]
    def add_column(table_id, opts = {})
      add_column_with_http_info(table_id, opts)
      return nil
    end

    # Create a column in a given table
    # 
    # @param table_id ID of table to return rows from
    # @param [Hash] opts the optional parameters
    # @option opts [String] :table_name Name of table to add
    # @option opts [String] :column_name The unique name of the column to create
    # @option opts [String] :type The datatype of the column, eg: INT
    # @option opts [String] :ui The Directus Interface to use for this column
    # @option opts [BOOLEAN] :hidden_input Whether the column will be hidden (globally) on the Edit Item page
    # @option opts [BOOLEAN] :hidden_list Whether the column will be hidden (globally) on the Item Listing page
    # @option opts [BOOLEAN] :required Whether the column is required. If required, the interface&#39;s validation function will be triggered
    # @option opts [Integer] :sort The sort order of the column used to override the column order in the schema
    # @option opts [String] :comment A helpful note to users for this column
    # @option opts [String] :relationship_type The column&#39;s relationship type (only used when storing relational data) eg: ONETOMANY, MANYTOMANY or MANYTOONE
    # @option opts [String] :related_table The table name this column is related to (only used when storing relational data)
    # @option opts [String] :junction_table The pivot/junction table that joins the column&#39;s table with the related table (only used when storing relational data)
    # @option opts [String] :junction_key_left The column name in junction that is related to the column&#39;s table (only used when storing relational data)
    # @option opts [String] :junction_key_right The column name in junction that is related to the related table (only used when storing relational data)
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_column_with_http_info(table_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TablesApi.add_column ..."
      end
      # verify the required parameter 'table_id' is set
      if @api_client.config.client_side_validation && table_id.nil?
        fail ArgumentError, "Missing the required parameter 'table_id' when calling TablesApi.add_column"
      end
      # resource path
      local_var_path = "/tables/{tableId}/columns".sub('{' + 'tableId' + '}', table_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["table_name"] = opts[:'table_name'] if !opts[:'table_name'].nil?
      form_params["column_name"] = opts[:'column_name'] if !opts[:'column_name'].nil?
      form_params["type"] = opts[:'type'] if !opts[:'type'].nil?
      form_params["ui"] = opts[:'ui'] if !opts[:'ui'].nil?
      form_params["hidden_input"] = opts[:'hidden_input'] if !opts[:'hidden_input'].nil?
      form_params["hidden_list"] = opts[:'hidden_list'] if !opts[:'hidden_list'].nil?
      form_params["required"] = opts[:'required'] if !opts[:'required'].nil?
      form_params["sort"] = opts[:'sort'] if !opts[:'sort'].nil?
      form_params["comment"] = opts[:'comment'] if !opts[:'comment'].nil?
      form_params["relationship_type"] = opts[:'relationship_type'] if !opts[:'relationship_type'].nil?
      form_params["related_table"] = opts[:'related_table'] if !opts[:'related_table'].nil?
      form_params["junction_table"] = opts[:'junction_table'] if !opts[:'junction_table'].nil?
      form_params["junction_key_left"] = opts[:'junction_key_left'] if !opts[:'junction_key_left'].nil?
      form_params["junction_key_right"] = opts[:'junction_key_right'] if !opts[:'junction_key_right'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TablesApi#add_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a new row
    # 
    # @param table_id ID of table to return rows from
    # @param custom_data Data based on your specific schema eg: active&#x3D;1&amp;title&#x3D;LoremIpsum
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_row(table_id, custom_data, opts = {})
      add_row_with_http_info(table_id, custom_data, opts)
      return nil
    end

    # Add a new row
    # 
    # @param table_id ID of table to return rows from
    # @param custom_data Data based on your specific schema eg: active&#x3D;1&amp;title&#x3D;LoremIpsum
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_row_with_http_info(table_id, custom_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TablesApi.add_row ..."
      end
      # verify the required parameter 'table_id' is set
      if @api_client.config.client_side_validation && table_id.nil?
        fail ArgumentError, "Missing the required parameter 'table_id' when calling TablesApi.add_row"
      end
      # verify the required parameter 'custom_data' is set
      if @api_client.config.client_side_validation && custom_data.nil?
        fail ArgumentError, "Missing the required parameter 'custom_data' when calling TablesApi.add_row"
      end
      # resource path
      local_var_path = "/tables/{tableId}/rows".sub('{' + 'tableId' + '}', table_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(custom_data)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TablesApi#add_row\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a new table
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Name of table to add
    # @return [nil]
    def add_table(opts = {})
      add_table_with_http_info(opts)
      return nil
    end

    # Add a new table
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Name of table to add
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_table_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TablesApi.add_table ..."
      end
      # resource path
      local_var_path = "/tables"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["name"] = opts[:'name'] if !opts[:'name'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TablesApi#add_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete row
    # 
    # @param table_id ID of table to return rows from
    # @param column_name Name of column to return
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_column(table_id, column_name, opts = {})
      delete_column_with_http_info(table_id, column_name, opts)
      return nil
    end

    # Delete row
    # 
    # @param table_id ID of table to return rows from
    # @param column_name Name of column to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_column_with_http_info(table_id, column_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TablesApi.delete_column ..."
      end
      # verify the required parameter 'table_id' is set
      if @api_client.config.client_side_validation && table_id.nil?
        fail ArgumentError, "Missing the required parameter 'table_id' when calling TablesApi.delete_column"
      end
      # verify the required parameter 'column_name' is set
      if @api_client.config.client_side_validation && column_name.nil?
        fail ArgumentError, "Missing the required parameter 'column_name' when calling TablesApi.delete_column"
      end
      # resource path
      local_var_path = "/tables/{tableId}/columns/{columnName}".sub('{' + 'tableId' + '}', table_id.to_s).sub('{' + 'columnName' + '}', column_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TablesApi#delete_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete row
    # 
    # @param table_id ID of table to return rows from
    # @param row_id ID of row to return from rows
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_row(table_id, row_id, opts = {})
      delete_row_with_http_info(table_id, row_id, opts)
      return nil
    end

    # Delete row
    # 
    # @param table_id ID of table to return rows from
    # @param row_id ID of row to return from rows
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_row_with_http_info(table_id, row_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TablesApi.delete_row ..."
      end
      # verify the required parameter 'table_id' is set
      if @api_client.config.client_side_validation && table_id.nil?
        fail ArgumentError, "Missing the required parameter 'table_id' when calling TablesApi.delete_row"
      end
      # verify the required parameter 'row_id' is set
      if @api_client.config.client_side_validation && row_id.nil?
        fail ArgumentError, "Missing the required parameter 'row_id' when calling TablesApi.delete_row"
      end
      # resource path
      local_var_path = "/tables/{tableId}/rows/{rowId}".sub('{' + 'tableId' + '}', table_id.to_s).sub('{' + 'rowId' + '}', row_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TablesApi#delete_row\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Table
    # 
    # @param table_id ID of table to return rows from
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_table(table_id, opts = {})
      delete_table_with_http_info(table_id, opts)
      return nil
    end

    # Delete Table
    # 
    # @param table_id ID of table to return rows from
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_table_with_http_info(table_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TablesApi.delete_table ..."
      end
      # verify the required parameter 'table_id' is set
      if @api_client.config.client_side_validation && table_id.nil?
        fail ArgumentError, "Missing the required parameter 'table_id' when calling TablesApi.delete_table"
      end
      # resource path
      local_var_path = "/tables/{tableId}".sub('{' + 'tableId' + '}', table_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TablesApi#delete_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns specific table
    # 
    # @param table_id ID of table to return rows from
    # @param [Hash] opts the optional parameters
    # @return [GetTable]
    def get_table(table_id, opts = {})
      data, _status_code, _headers = get_table_with_http_info(table_id, opts)
      return data
    end

    # Returns specific table
    # 
    # @param table_id ID of table to return rows from
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetTable, Fixnum, Hash)>] GetTable data, response status code and response headers
    def get_table_with_http_info(table_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TablesApi.get_table ..."
      end
      # verify the required parameter 'table_id' is set
      if @api_client.config.client_side_validation && table_id.nil?
        fail ArgumentError, "Missing the required parameter 'table_id' when calling TablesApi.get_table"
      end
      # resource path
      local_var_path = "/tables/{tableId}".sub('{' + 'tableId' + '}', table_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetTable')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TablesApi#get_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns specific table column
    # 
    # @param table_id ID of table to return rows from
    # @param column_name Name of column to return
    # @param [Hash] opts the optional parameters
    # @return [GetTableColumn]
    def get_table_column(table_id, column_name, opts = {})
      data, _status_code, _headers = get_table_column_with_http_info(table_id, column_name, opts)
      return data
    end

    # Returns specific table column
    # 
    # @param table_id ID of table to return rows from
    # @param column_name Name of column to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetTableColumn, Fixnum, Hash)>] GetTableColumn data, response status code and response headers
    def get_table_column_with_http_info(table_id, column_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TablesApi.get_table_column ..."
      end
      # verify the required parameter 'table_id' is set
      if @api_client.config.client_side_validation && table_id.nil?
        fail ArgumentError, "Missing the required parameter 'table_id' when calling TablesApi.get_table_column"
      end
      # verify the required parameter 'column_name' is set
      if @api_client.config.client_side_validation && column_name.nil?
        fail ArgumentError, "Missing the required parameter 'column_name' when calling TablesApi.get_table_column"
      end
      # resource path
      local_var_path = "/tables/{tableId}/columns/{columnName}".sub('{' + 'tableId' + '}', table_id.to_s).sub('{' + 'columnName' + '}', column_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetTableColumn')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TablesApi#get_table_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns table columns
    # 
    # @param table_id ID of table to return rows from
    # @param [Hash] opts the optional parameters
    # @return [GetTableColumns]
    def get_table_columns(table_id, opts = {})
      data, _status_code, _headers = get_table_columns_with_http_info(table_id, opts)
      return data
    end

    # Returns table columns
    # 
    # @param table_id ID of table to return rows from
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetTableColumns, Fixnum, Hash)>] GetTableColumns data, response status code and response headers
    def get_table_columns_with_http_info(table_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TablesApi.get_table_columns ..."
      end
      # verify the required parameter 'table_id' is set
      if @api_client.config.client_side_validation && table_id.nil?
        fail ArgumentError, "Missing the required parameter 'table_id' when calling TablesApi.get_table_columns"
      end
      # resource path
      local_var_path = "/tables/{tableId}/columns".sub('{' + 'tableId' + '}', table_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetTableColumns')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TablesApi#get_table_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns specific table row
    # 
    # @param table_id ID of table to return rows from
    # @param row_id ID of row to return from rows
    # @param [Hash] opts the optional parameters
    # @return [GetTableRow]
    def get_table_row(table_id, row_id, opts = {})
      data, _status_code, _headers = get_table_row_with_http_info(table_id, row_id, opts)
      return data
    end

    # Returns specific table row
    # 
    # @param table_id ID of table to return rows from
    # @param row_id ID of row to return from rows
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetTableRow, Fixnum, Hash)>] GetTableRow data, response status code and response headers
    def get_table_row_with_http_info(table_id, row_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TablesApi.get_table_row ..."
      end
      # verify the required parameter 'table_id' is set
      if @api_client.config.client_side_validation && table_id.nil?
        fail ArgumentError, "Missing the required parameter 'table_id' when calling TablesApi.get_table_row"
      end
      # verify the required parameter 'row_id' is set
      if @api_client.config.client_side_validation && row_id.nil?
        fail ArgumentError, "Missing the required parameter 'row_id' when calling TablesApi.get_table_row"
      end
      # resource path
      local_var_path = "/tables/{tableId}/rows/{rowId}".sub('{' + 'tableId' + '}', table_id.to_s).sub('{' + 'rowId' + '}', row_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetTableRow')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TablesApi#get_table_row\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns table rows
    # 
    # @param table_id ID of table to return rows from
    # @param [Hash] opts the optional parameters
    # @return [GetTableRows]
    def get_table_rows(table_id, opts = {})
      data, _status_code, _headers = get_table_rows_with_http_info(table_id, opts)
      return data
    end

    # Returns table rows
    # 
    # @param table_id ID of table to return rows from
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetTableRows, Fixnum, Hash)>] GetTableRows data, response status code and response headers
    def get_table_rows_with_http_info(table_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TablesApi.get_table_rows ..."
      end
      # verify the required parameter 'table_id' is set
      if @api_client.config.client_side_validation && table_id.nil?
        fail ArgumentError, "Missing the required parameter 'table_id' when calling TablesApi.get_table_rows"
      end
      # resource path
      local_var_path = "/tables/{tableId}/rows".sub('{' + 'tableId' + '}', table_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetTableRows')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TablesApi#get_table_rows\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns tables
    # 
    # @param [Hash] opts the optional parameters
    # @return [GetTables]
    def get_tables(opts = {})
      data, _status_code, _headers = get_tables_with_http_info(opts)
      return data
    end

    # Returns tables
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetTables, Fixnum, Hash)>] GetTables data, response status code and response headers
    def get_tables_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TablesApi.get_tables ..."
      end
      # resource path
      local_var_path = "/tables"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetTables')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TablesApi#get_tables\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update column
    # 
    # @param table_id ID of table to return rows from
    # @param column_name Name of column to return
    # @param [Hash] opts the optional parameters
    # @option opts [String] :data_type The datatype of the column, eg: INT
    # @option opts [String] :ui The Directus Interface to use for this column
    # @option opts [BOOLEAN] :hidden_input Whether the column will be hidden (globally) on the Edit Item page
    # @option opts [BOOLEAN] :hidden_list Whether the column will be hidden (globally) on the Item Listing page
    # @option opts [BOOLEAN] :required Whether the column is required. If required, the interface&#39;s validation function will be triggered
    # @option opts [Integer] :sort The sort order of the column used to override the column order in the schema
    # @option opts [String] :comment A helpful note to users for this column
    # @option opts [String] :relationship_type The column&#39;s relationship type (only used when storing relational data) eg: ONETOMANY, MANYTOMANY or MANYTOONE
    # @option opts [String] :related_table The table name this column is related to (only used when storing relational data)
    # @option opts [String] :junction_table The pivot/junction table that joins the column&#39;s table with the related table (only used when storing relational data)
    # @option opts [String] :junction_key_left The column name in junction that is related to the column&#39;s table (only used when storing relational data)
    # @option opts [String] :junction_key_right The column name in junction that is related to the related table (only used when storing relational data)
    # @return [nil]
    def update_column(table_id, column_name, opts = {})
      update_column_with_http_info(table_id, column_name, opts)
      return nil
    end

    # Update column
    # 
    # @param table_id ID of table to return rows from
    # @param column_name Name of column to return
    # @param [Hash] opts the optional parameters
    # @option opts [String] :data_type The datatype of the column, eg: INT
    # @option opts [String] :ui The Directus Interface to use for this column
    # @option opts [BOOLEAN] :hidden_input Whether the column will be hidden (globally) on the Edit Item page
    # @option opts [BOOLEAN] :hidden_list Whether the column will be hidden (globally) on the Item Listing page
    # @option opts [BOOLEAN] :required Whether the column is required. If required, the interface&#39;s validation function will be triggered
    # @option opts [Integer] :sort The sort order of the column used to override the column order in the schema
    # @option opts [String] :comment A helpful note to users for this column
    # @option opts [String] :relationship_type The column&#39;s relationship type (only used when storing relational data) eg: ONETOMANY, MANYTOMANY or MANYTOONE
    # @option opts [String] :related_table The table name this column is related to (only used when storing relational data)
    # @option opts [String] :junction_table The pivot/junction table that joins the column&#39;s table with the related table (only used when storing relational data)
    # @option opts [String] :junction_key_left The column name in junction that is related to the column&#39;s table (only used when storing relational data)
    # @option opts [String] :junction_key_right The column name in junction that is related to the related table (only used when storing relational data)
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_column_with_http_info(table_id, column_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TablesApi.update_column ..."
      end
      # verify the required parameter 'table_id' is set
      if @api_client.config.client_side_validation && table_id.nil?
        fail ArgumentError, "Missing the required parameter 'table_id' when calling TablesApi.update_column"
      end
      # verify the required parameter 'column_name' is set
      if @api_client.config.client_side_validation && column_name.nil?
        fail ArgumentError, "Missing the required parameter 'column_name' when calling TablesApi.update_column"
      end
      # resource path
      local_var_path = "/tables/{tableId}/columns/{columnName}".sub('{' + 'tableId' + '}', table_id.to_s).sub('{' + 'columnName' + '}', column_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["data_type"] = opts[:'data_type'] if !opts[:'data_type'].nil?
      form_params["ui"] = opts[:'ui'] if !opts[:'ui'].nil?
      form_params["hidden_input"] = opts[:'hidden_input'] if !opts[:'hidden_input'].nil?
      form_params["hidden_list"] = opts[:'hidden_list'] if !opts[:'hidden_list'].nil?
      form_params["required"] = opts[:'required'] if !opts[:'required'].nil?
      form_params["sort"] = opts[:'sort'] if !opts[:'sort'].nil?
      form_params["comment"] = opts[:'comment'] if !opts[:'comment'].nil?
      form_params["relationship_type"] = opts[:'relationship_type'] if !opts[:'relationship_type'].nil?
      form_params["related_table"] = opts[:'related_table'] if !opts[:'related_table'].nil?
      form_params["junction_table"] = opts[:'junction_table'] if !opts[:'junction_table'].nil?
      form_params["junction_key_left"] = opts[:'junction_key_left'] if !opts[:'junction_key_left'].nil?
      form_params["junction_key_right"] = opts[:'junction_key_right'] if !opts[:'junction_key_right'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TablesApi#update_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update row
    # 
    # @param table_id ID of table to return rows from
    # @param row_id ID of row to return from rows
    # @param custom_data Data based on your specific schema eg: active&#x3D;1&amp;title&#x3D;LoremIpsum
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_row(table_id, row_id, custom_data, opts = {})
      update_row_with_http_info(table_id, row_id, custom_data, opts)
      return nil
    end

    # Update row
    # 
    # @param table_id ID of table to return rows from
    # @param row_id ID of row to return from rows
    # @param custom_data Data based on your specific schema eg: active&#x3D;1&amp;title&#x3D;LoremIpsum
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_row_with_http_info(table_id, row_id, custom_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TablesApi.update_row ..."
      end
      # verify the required parameter 'table_id' is set
      if @api_client.config.client_side_validation && table_id.nil?
        fail ArgumentError, "Missing the required parameter 'table_id' when calling TablesApi.update_row"
      end
      # verify the required parameter 'row_id' is set
      if @api_client.config.client_side_validation && row_id.nil?
        fail ArgumentError, "Missing the required parameter 'row_id' when calling TablesApi.update_row"
      end
      # verify the required parameter 'custom_data' is set
      if @api_client.config.client_side_validation && custom_data.nil?
        fail ArgumentError, "Missing the required parameter 'custom_data' when calling TablesApi.update_row"
      end
      # resource path
      local_var_path = "/tables/{tableId}/rows/{rowId}".sub('{' + 'tableId' + '}', table_id.to_s).sub('{' + 'rowId' + '}', row_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(custom_data)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TablesApi#update_row\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
