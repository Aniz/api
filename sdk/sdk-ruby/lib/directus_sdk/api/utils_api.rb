=begin
#directus.io

#API for directus.io

OpenAPI spec version: 1.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.0-SNAPSHOT

=end

require "uri"

module DirectusSDK
  class UtilsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get a hashed value
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :string The string to be hashed
    # @option opts [String] :hasher The hasher used to hash the given string (default to core)
    # @option opts [String] :options The hasher options
    # @return [nil]
    def get_hash(opts = {})
      get_hash_with_http_info(opts)
      return nil
    end

    # Get a hashed value
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :string The string to be hashed
    # @option opts [String] :hasher The hasher used to hash the given string
    # @option opts [String] :options The hasher options
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_hash_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UtilsApi.get_hash ..."
      end
      if @api_client.config.client_side_validation && opts[:'hasher'] && !['core', 'bcrypt', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512'].include?(opts[:'hasher'])
        fail ArgumentError, 'invalid value for "hasher", must be one of core, bcrypt, sha1, sha224, sha256, sha384, sha512'
      end
      # resource path
      local_var_path = "/hash"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["string"] = opts[:'string'] if !opts[:'string'].nil?
      form_params["hasher"] = opts[:'hasher'] if !opts[:'hasher'].nil?
      form_params["options"] = opts[:'options'] if !opts[:'options'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UtilsApi#get_hash\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns random alphanumeric string
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :length Integer(String) for length of random string
    # @return [nil]
    def get_random(opts = {})
      get_random_with_http_info(opts)
      return nil
    end

    # Returns random alphanumeric string
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :length Integer(String) for length of random string
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_random_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UtilsApi.get_random ..."
      end
      # resource path
      local_var_path = "/random"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["length"] = opts[:'length'] if !opts[:'length'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UtilsApi#get_random\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
