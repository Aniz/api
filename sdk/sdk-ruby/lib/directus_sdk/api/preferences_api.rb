=begin
#directus.io

#API for directus.io

OpenAPI spec version: 1.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.0-SNAPSHOT

=end

require "uri"

module DirectusSDK
  class PreferencesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Returns table preferences
    # 
    # @param table_id ID of table to return rows from
    # @param [Hash] opts the optional parameters
    # @return [GetPreferences]
    def get_preferences(table_id, opts = {})
      data, _status_code, _headers = get_preferences_with_http_info(table_id, opts)
      return data
    end

    # Returns table preferences
    # 
    # @param table_id ID of table to return rows from
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetPreferences, Fixnum, Hash)>] GetPreferences data, response status code and response headers
    def get_preferences_with_http_info(table_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PreferencesApi.get_preferences ..."
      end
      # verify the required parameter 'table_id' is set
      if @api_client.config.client_side_validation && table_id.nil?
        fail ArgumentError, "Missing the required parameter 'table_id' when calling PreferencesApi.get_preferences"
      end
      # resource path
      local_var_path = "/tables/{tableId}/preferences".sub('{' + 'tableId' + '}', table_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetPreferences')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreferencesApi#get_preferences\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update table preferences
    # 
    # @param table_id ID of table to return rows from
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Preference&#39;s Unique Identification number
    # @option opts [String] :table_name Name of table to add
    # @option opts [String] :columns_visible List of visible columns, separated by commas
    # @option opts [Integer] :sort The sort order of the column used to override the column order in the schema
    # @option opts [String] :sort_order Sort Order (ASC&#x3D;Ascending or DESC&#x3D;Descending)
    # @option opts [String] :status List of status values. separated by comma
    # @return [nil]
    def update_preferences(table_id, opts = {})
      update_preferences_with_http_info(table_id, opts)
      return nil
    end

    # Update table preferences
    # 
    # @param table_id ID of table to return rows from
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Preference&#39;s Unique Identification number
    # @option opts [String] :table_name Name of table to add
    # @option opts [String] :columns_visible List of visible columns, separated by commas
    # @option opts [Integer] :sort The sort order of the column used to override the column order in the schema
    # @option opts [String] :sort_order Sort Order (ASC&#x3D;Ascending or DESC&#x3D;Descending)
    # @option opts [String] :status List of status values. separated by comma
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_preferences_with_http_info(table_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PreferencesApi.update_preferences ..."
      end
      # verify the required parameter 'table_id' is set
      if @api_client.config.client_side_validation && table_id.nil?
        fail ArgumentError, "Missing the required parameter 'table_id' when calling PreferencesApi.update_preferences"
      end
      if @api_client.config.client_side_validation && opts[:'sort_order'] && !['ASC', 'DESC'].include?(opts[:'sort_order'])
        fail ArgumentError, 'invalid value for "sort_order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/tables/{tableId}/preferences".sub('{' + 'tableId' + '}', table_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["id"] = opts[:'id'] if !opts[:'id'].nil?
      form_params["table_name"] = opts[:'table_name'] if !opts[:'table_name'].nil?
      form_params["columns_visible"] = opts[:'columns_visible'] if !opts[:'columns_visible'].nil?
      form_params["sort"] = opts[:'sort'] if !opts[:'sort'].nil?
      form_params["sort_order"] = opts[:'sort_order'] if !opts[:'sort_order'].nil?
      form_params["status"] = opts[:'status'] if !opts[:'status'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreferencesApi#update_preferences\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
