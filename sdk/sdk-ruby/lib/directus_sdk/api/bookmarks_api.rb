=begin
#directus.io

#API for directus.io

OpenAPI spec version: 1.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.0-SNAPSHOT

=end

require "uri"

module DirectusSDK
  class BookmarksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create a column in a given table
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user [Directus user id] This assigns the bookmark to a specific user (there&#39;s a ticket to allow for \&quot;global\&quot; bookmarks using NULL) (Only using local connection)
    # @option opts [String] :title The text to display in the navigation menu
    # @option opts [String] :url The path to navigate to when clicked, relative to the Directus root
    # @option opts [String] :icon_class Deprecated
    # @option opts [String] :active Deprecated
    # @option opts [String] :section [\&quot;search\&quot; or \&quot;other\&quot;] Which nav section to show the link within. User generated bookmarks use \&quot;search\&quot;, while all system links go within \&quot;other\&quot;
    # @return [nil]
    def add_bookmark(opts = {})
      add_bookmark_with_http_info(opts)
      return nil
    end

    # Create a column in a given table
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user [Directus user id] This assigns the bookmark to a specific user (there&#39;s a ticket to allow for \&quot;global\&quot; bookmarks using NULL) (Only using local connection)
    # @option opts [String] :title The text to display in the navigation menu
    # @option opts [String] :url The path to navigate to when clicked, relative to the Directus root
    # @option opts [String] :icon_class Deprecated
    # @option opts [String] :active Deprecated
    # @option opts [String] :section [\&quot;search\&quot; or \&quot;other\&quot;] Which nav section to show the link within. User generated bookmarks use \&quot;search\&quot;, while all system links go within \&quot;other\&quot;
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_bookmark_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BookmarksApi.add_bookmark ..."
      end
      # resource path
      local_var_path = "/bookmarks"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["user"] = opts[:'user'] if !opts[:'user'].nil?
      form_params["title"] = opts[:'title'] if !opts[:'title'].nil?
      form_params["url"] = opts[:'url'] if !opts[:'url'].nil?
      form_params["icon_class"] = opts[:'icon_class'] if !opts[:'icon_class'].nil?
      form_params["active"] = opts[:'active'] if !opts[:'active'].nil?
      form_params["section"] = opts[:'section'] if !opts[:'section'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookmarksApi#add_bookmark\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes specific bookmark
    # 
    # @param bookmark_id ID of table to return rows from
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_bookmark(bookmark_id, opts = {})
      delete_bookmark_with_http_info(bookmark_id, opts)
      return nil
    end

    # Deletes specific bookmark
    # 
    # @param bookmark_id ID of table to return rows from
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_bookmark_with_http_info(bookmark_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BookmarksApi.delete_bookmark ..."
      end
      # verify the required parameter 'bookmark_id' is set
      if @api_client.config.client_side_validation && bookmark_id.nil?
        fail ArgumentError, "Missing the required parameter 'bookmark_id' when calling BookmarksApi.delete_bookmark"
      end
      # resource path
      local_var_path = "/bookmarks/{bookmarkId}".sub('{' + 'bookmarkId' + '}', bookmark_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookmarksApi#delete_bookmark\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns specific bookmark
    # 
    # @param bookmark_id ID of table to return rows from
    # @param [Hash] opts the optional parameters
    # @return [GetBookmark]
    def get_bookmark(bookmark_id, opts = {})
      data, _status_code, _headers = get_bookmark_with_http_info(bookmark_id, opts)
      return data
    end

    # Returns specific bookmark
    # 
    # @param bookmark_id ID of table to return rows from
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetBookmark, Fixnum, Hash)>] GetBookmark data, response status code and response headers
    def get_bookmark_with_http_info(bookmark_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BookmarksApi.get_bookmark ..."
      end
      # verify the required parameter 'bookmark_id' is set
      if @api_client.config.client_side_validation && bookmark_id.nil?
        fail ArgumentError, "Missing the required parameter 'bookmark_id' when calling BookmarksApi.get_bookmark"
      end
      # resource path
      local_var_path = "/bookmarks/{bookmarkId}".sub('{' + 'bookmarkId' + '}', bookmark_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetBookmark')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookmarksApi#get_bookmark\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns bookmarks
    # 
    # @param [Hash] opts the optional parameters
    # @return [GetBookmarks]
    def get_bookmarks(opts = {})
      data, _status_code, _headers = get_bookmarks_with_http_info(opts)
      return data
    end

    # Returns bookmarks
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetBookmarks, Fixnum, Hash)>] GetBookmarks data, response status code and response headers
    def get_bookmarks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BookmarksApi.get_bookmarks ..."
      end
      # resource path
      local_var_path = "/bookmarks"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetBookmarks')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookmarksApi#get_bookmarks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns bookmarks of current user
    # 
    # @param [Hash] opts the optional parameters
    # @return [GetBookmarks]
    def get_bookmarks_self(opts = {})
      data, _status_code, _headers = get_bookmarks_self_with_http_info(opts)
      return data
    end

    # Returns bookmarks of current user
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetBookmarks, Fixnum, Hash)>] GetBookmarks data, response status code and response headers
    def get_bookmarks_self_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BookmarksApi.get_bookmarks_self ..."
      end
      # resource path
      local_var_path = "/bookmarks/self"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetBookmarks')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookmarksApi#get_bookmarks_self\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
