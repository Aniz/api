/* 
 * directus.io
 *
 * API for directus.io
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

package directussdk

import (
	"net/url"
	"net/http"
	"strings"
	"golang.org/x/net/context"
	"encoding/json"
	"fmt"
)

// Linger please
var (
	_ context.Context
)

type FilesApiService service


/* FilesApiService Creates file
 * @param ctx context.Context Authentication Context 
 @param optional (nil or map[string]interface{}) with one or more of:
     @param "data" (string) The file&#39;s Base64 content
     @param "active" (int32) The file&#39;s status, default options are: 1 (active), 2 (inactive), 0 (deleted)
     @param "name" (string) The name used in the filesystem, including the extension, eg: \&quot;my-file.jpg\&quot;. This is generated by the system based on Global Settings
     @param "title" (string) The file&#39;s title
     @param "location" (string) Location of where the picture was taken, if any. Pulled from the IPTC location when available
     @param "type_" (string) The file&#39;s mime type
     @param "tags" (string) A CSV of tags for this file. Pulled from the IPTC keywords when available
     @param "caption" (string) The file&#39;s caption or description. Pulled from the IPTC description when available
 @return */
func (a *FilesApiService) CreateFile(ctx context.Context, localVarOptionals map[string]interface{}) ( *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/files"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if err := typeCheckParameter(localVarOptionals["data"], "string", "data"); err != nil {
		return nil, err
	}
	if err := typeCheckParameter(localVarOptionals["active"], "int32", "active"); err != nil {
		return nil, err
	}
	if err := typeCheckParameter(localVarOptionals["name"], "string", "name"); err != nil {
		return nil, err
	}
	if err := typeCheckParameter(localVarOptionals["title"], "string", "title"); err != nil {
		return nil, err
	}
	if err := typeCheckParameter(localVarOptionals["location"], "string", "location"); err != nil {
		return nil, err
	}
	if err := typeCheckParameter(localVarOptionals["type_"], "string", "type_"); err != nil {
		return nil, err
	}
	if err := typeCheckParameter(localVarOptionals["tags"], "string", "tags"); err != nil {
		return nil, err
	}
	if err := typeCheckParameter(localVarOptionals["caption"], "string", "caption"); err != nil {
		return nil, err
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/x-www-form-urlencoded",  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarTempParam, localVarOk := localVarOptionals["data"].(string); localVarOk {
		localVarFormParams.Add("data", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["active"].(int32); localVarOk {
		localVarFormParams.Add("active", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["name"].(string); localVarOk {
		localVarFormParams.Add("name", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["title"].(string); localVarOk {
		localVarFormParams.Add("title", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["location"].(string); localVarOk {
		localVarFormParams.Add("location", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["type_"].(string); localVarOk {
		localVarFormParams.Add("type", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["tags"].(string); localVarOk {
		localVarFormParams.Add("tags", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["caption"].(string); localVarOk {
		localVarFormParams.Add("caption", parameterToString(localVarTempParam, ""))
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams["access_token"] = []string{ key }
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	 localVarHttpResponse, err := a.client.callAPI(r)
	 if err != nil || localVarHttpResponse == nil {
		  return localVarHttpResponse, err
	 }
	 defer localVarHttpResponse.Body.Close()
	 if localVarHttpResponse.StatusCode >= 300 {
		return localVarHttpResponse, reportError(localVarHttpResponse.Status)
	 }

	return localVarHttpResponse, err
}

/* FilesApiService Returns specific file by id
 * @param ctx context.Context Authentication Context 
 @param fileId ID of file to get
 @return GetFile*/
func (a *FilesApiService) GetFile(ctx context.Context, fileId int32) (GetFile,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  GetFile
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/files/{fileId}"
	localVarPath = strings.Replace(localVarPath, "{"+"fileId"+"}", fmt.Sprintf("%v", fileId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams["access_token"] = []string{ key }
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	 localVarHttpResponse, err := a.client.callAPI(r)
	 if err != nil || localVarHttpResponse == nil {
		  return successPayload, localVarHttpResponse, err
	 }
	 defer localVarHttpResponse.Body.Close()
	 if localVarHttpResponse.StatusCode >= 300 {
		return successPayload, localVarHttpResponse, reportError(localVarHttpResponse.Status)
	 }

	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
	 	return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

/* FilesApiService Returns files
 * @param ctx context.Context Authentication Context 
 @return GetFiles*/
func (a *FilesApiService) GetFiles(ctx context.Context, ) (GetFiles,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  GetFiles
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/files"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams["access_token"] = []string{ key }
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	 localVarHttpResponse, err := a.client.callAPI(r)
	 if err != nil || localVarHttpResponse == nil {
		  return successPayload, localVarHttpResponse, err
	 }
	 defer localVarHttpResponse.Body.Close()
	 if localVarHttpResponse.StatusCode >= 300 {
		return successPayload, localVarHttpResponse, reportError(localVarHttpResponse.Status)
	 }

	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
	 	return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

/* FilesApiService Creates file
 * @param ctx context.Context Authentication Context 
 @param fileId ID of file to get
 @param optional (nil or map[string]interface{}) with one or more of:
     @param "data" (string) The file&#39;s Base64 content
     @param "active" (int32) The file&#39;s status, default options are: 1 (active), 2 (inactive), 0 (deleted)
     @param "name" (string) The name used in the filesystem, including the extension, eg: \&quot;my-file.jpg\&quot;. This is generated by the system based on Global Settings
     @param "title" (string) The file&#39;s title
     @param "location" (string) Location of where the picture was taken, if any. Pulled from the IPTC location when available
     @param "type_" (string) The file&#39;s mime type
     @param "tags" (string) A CSV of tags for this file. Pulled from the IPTC keywords when available
     @param "caption" (string) The file&#39;s caption or description. Pulled from the IPTC description when available
     @param "url" (string) File url relativity to Directus base url
     @param "width" (int32) File width
     @param "height" (int32) File height
     @param "size" (int32) File size in bytes
     @param "embedId" (string) ID of the embedded file. Ex Youtube ID
     @param "user" (int32) File owner (who uploaded the file)
     @param "dateUploaded" (string) File uploaded date. TODO It should be an DateTime object
     @param "storageAdapter" (string) Storage adapter used to upload the file
 @return */
func (a *FilesApiService) UpdateFile(ctx context.Context, fileId int32, localVarOptionals map[string]interface{}) ( *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Put")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/files/{fileId}"
	localVarPath = strings.Replace(localVarPath, "{"+"fileId"+"}", fmt.Sprintf("%v", fileId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if err := typeCheckParameter(localVarOptionals["data"], "string", "data"); err != nil {
		return nil, err
	}
	if err := typeCheckParameter(localVarOptionals["active"], "int32", "active"); err != nil {
		return nil, err
	}
	if err := typeCheckParameter(localVarOptionals["name"], "string", "name"); err != nil {
		return nil, err
	}
	if err := typeCheckParameter(localVarOptionals["title"], "string", "title"); err != nil {
		return nil, err
	}
	if err := typeCheckParameter(localVarOptionals["location"], "string", "location"); err != nil {
		return nil, err
	}
	if err := typeCheckParameter(localVarOptionals["type_"], "string", "type_"); err != nil {
		return nil, err
	}
	if err := typeCheckParameter(localVarOptionals["tags"], "string", "tags"); err != nil {
		return nil, err
	}
	if err := typeCheckParameter(localVarOptionals["caption"], "string", "caption"); err != nil {
		return nil, err
	}
	if err := typeCheckParameter(localVarOptionals["url"], "string", "url"); err != nil {
		return nil, err
	}
	if err := typeCheckParameter(localVarOptionals["width"], "int32", "width"); err != nil {
		return nil, err
	}
	if err := typeCheckParameter(localVarOptionals["height"], "int32", "height"); err != nil {
		return nil, err
	}
	if err := typeCheckParameter(localVarOptionals["size"], "int32", "size"); err != nil {
		return nil, err
	}
	if err := typeCheckParameter(localVarOptionals["embedId"], "string", "embedId"); err != nil {
		return nil, err
	}
	if err := typeCheckParameter(localVarOptionals["user"], "int32", "user"); err != nil {
		return nil, err
	}
	if err := typeCheckParameter(localVarOptionals["dateUploaded"], "string", "dateUploaded"); err != nil {
		return nil, err
	}
	if err := typeCheckParameter(localVarOptionals["storageAdapter"], "string", "storageAdapter"); err != nil {
		return nil, err
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/x-www-form-urlencoded",  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarTempParam, localVarOk := localVarOptionals["data"].(string); localVarOk {
		localVarFormParams.Add("data", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["active"].(int32); localVarOk {
		localVarFormParams.Add("active", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["name"].(string); localVarOk {
		localVarFormParams.Add("name", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["title"].(string); localVarOk {
		localVarFormParams.Add("title", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["location"].(string); localVarOk {
		localVarFormParams.Add("location", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["type_"].(string); localVarOk {
		localVarFormParams.Add("type", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["tags"].(string); localVarOk {
		localVarFormParams.Add("tags", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["caption"].(string); localVarOk {
		localVarFormParams.Add("caption", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["url"].(string); localVarOk {
		localVarFormParams.Add("url", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["width"].(int32); localVarOk {
		localVarFormParams.Add("width", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["height"].(int32); localVarOk {
		localVarFormParams.Add("height", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["size"].(int32); localVarOk {
		localVarFormParams.Add("size", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["embedId"].(string); localVarOk {
		localVarFormParams.Add("embed_id", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["user"].(int32); localVarOk {
		localVarFormParams.Add("user", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["dateUploaded"].(string); localVarOk {
		localVarFormParams.Add("date_uploaded", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["storageAdapter"].(string); localVarOk {
		localVarFormParams.Add("storage_adapter", parameterToString(localVarTempParam, ""))
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams["access_token"] = []string{ key }
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	 localVarHttpResponse, err := a.client.callAPI(r)
	 if err != nil || localVarHttpResponse == nil {
		  return localVarHttpResponse, err
	 }
	 defer localVarHttpResponse.Body.Close()
	 if localVarHttpResponse.StatusCode >= 300 {
		return localVarHttpResponse, reportError(localVarHttpResponse.Status)
	 }

	return localVarHttpResponse, err
}

